from fastapi import FastAPI
from pydantic import BaseModel
import mysql.connector

app = FastAPI()

# model input
class DataModel(BaseModel):
    nama: str
    hobi: str

# koneksi ke database mysql
db = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",
    database="datauser"
)

# membuat objek cursor
cursor = db.cursor()

# method (get) untuk menampilkan semua data
@app.get("/list/")
async def menampilkan_data():
    query = "SELECT * FROM siswa"
    cursor.execute(query)
    results = cursor.fetchall()
    return results

# method (get) untuk mencari data berdasarkan ID
@app.get("/cari/{id}")
async def mencari_data(id: int):
    query = "SELECT * FROM siswa WHERE id = %s"
    values = (id,)
    cursor.execute(query, values)
    result = cursor.fetchone()
    if result is None:
        return {"message": "Data tidak ditemukan"}
    return result

# method (post) untuk menambahkan data
@app.post("/tambah/")
async def menambah_data(data: DataModel):
    query = "INSERT INTO siswa (nama, hobi) VALUES (%s, %s)"
    values = (data.nama, data.hobi)
    cursor.execute(query, values)
    db.commit()
    return {"message": "Data berhasil ditambahkan"}

# method (patch) untuk mengganti data yang diinginkan
@app.patch("/patch/{id}")
async def mengganti_data(id: int, data: DataModel):
    query = "UPDATE siswa SET "
    values = []
    if data.nama:
        query += "nama=%s, "
        values.append(data.nama)
    if data.hobi:
        query += "hobi=%s, "
        values.append(data.hobi)
    # hapus koma terakhir pada query
    query = query[:-2]
    query += " WHERE id=%s"
    values.append(id)
    cursor.execute(query, tuple(values))
    db.commit()
    return {"status": "Data berhasil diperbarui"}

# method (delete) untuk menghapus data berdasarkan ID
@app.delete("/hapus/{id}")
async def menghapus_data(id: int):
    query = "DELETE FROM siswa WHERE id = %s"
    values = (id,)
    cursor.execute(query, values)
    db.commit()
    if cursor.rowcount > 0:
        return {"message": "Data berhasil dihapus"}
    else:
        return {"message": "Data tidak ditemukan"}

# method (put) untuk mengganti seluruh data
@app.put("/update/{id}")
async def mengupdate_seluruh_data(id: int, data: DataModel):
    query = "UPDATE siswa SET nama = %s, hobi = %s WHERE id = %s"
    values = (data.nama, data.hobi, id)
    cursor.execute(query, values)
    db.commit()
    if cursor.rowcount > 0:
        return {"message": "Data berhasil diupdate"}
    else:
        return {"message": "Data tidak ditemukan"}
