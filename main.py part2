from fastapi import FastAPI
from pydantic import BaseModel

app = FastAPI()

# model input
class dataModel(BaseModel):
    nama: str
    umur: int 
    hobi: str

# data awal
dataUser = {
    "adam": {"nama": "adam", "umur": "18", "hobi": "menggambar"},
    "ivan": {"nama": "ivan", "umur": "18", "hobi": "desain"},
    "bona": {"nama": "bona", "umur": "18", "hobi": "mancing"}
}

# tampil
@app.get("/list/")
async def read_items():
    return dataUser

# tambah
@app.post("/tambah/")
async def tambah(user: dataModel):
    dic = user.dict()
    nama = dic["nama"].lower()
    dataUser[nama] = dic
    return {"message": "User added successfully"}

# cari
@app.get("/cari/{nama}")
async def baca(nama: str):
    nama = nama.lower()
    if nama in dataUser:
        return dataUser[nama]
    else:
        return {"message": "User not found"}

# hapus
@app.delete("/hapus/{namaUser}")
async def hapus_char(namaUser: str):
    namaUser = namaUser.lower()
    if namaUser in dataUser:
        del dataUser[namaUser]
        return {"terhapus"}
    else:
        return{"nama tidak ada"}

# mengganti seluruh data
@app.put("/update/{nama}")
async def update_char(nama:str, user:dataModel):
    nama = nama.lower()
    if nama in dataUser:
        dataUser[nama] = user.dict()
        return{"update berhasil"}
    else:
        return{"nama tidak ditemukan"}

# mengganti data yang diinginkan
@app.patch("/patch/{nama}")
async def patch_char(nama: str, user:dataModel):
    nama= nama.lower()
    if nama in dataUser:
        up = user.dict(exclude_unset = True)
        dataUser[nama].update(up)
        return{"update pada" + nama + "berhasi"}
    else:
        return{"data tidak ditemukan"}    
